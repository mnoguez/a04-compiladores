PARSER_BEGIN(Karloff)
import java.io.*;
import java.util.ArrayList;

class ArvoreKarloff{
    Main main;
    ArrayList<Func> funcs;

    ArvoreKarloff(Main main, ArrayList<Func> funcs){
        this.main = main;
        this.funcs = funcs;
    }
}

class Main{
    ArrayList<Decl> varDecl;
    ArrayList<Comando> seqComandos;

    Main(ArrayList<Decl> varDecl, ArrayList<Comando> seqComandos){
        this.varDecl = varDecl;
        this.seqComandos = seqComandos;
    }
}

class Decl{
    Tipo tipo;
    String var;

    Decl(Tipo tipo, String var){
        this.tipo = tipo;
        this.var = var;
    }
}

class Tipo{}

class Int extends Tipo{
    int n;

    Int(int n){
        this.n = n;
    }
}

class Bool extends Tipo{
    boolean bool;

    Bool(boolean bool){
        this.bool = bool;
    }
}

class Comando{}

class Atrib extends Comando{
    String var;
    Exp exp;

    Atrib(String var, Exp exp){
        this.var = var;
        this.exp = exp;
    }
}

class ChamadaDeFuncao extends Comando{
    String var;
    ArrayList<Exp> listaExp;

    ChamadaDeFuncao(String var, ArrayList<Exp> listaExp){
        this.var = var;
        this.listaExp = listaExp;
    }
}

class If extends Comando{
    Exp exp;
    ArrayList<Comando> seqComandos;

    If(Exp exp, ArrayList<Comando> seqComandos){
        this.exp = exp;
        this.seqComandos = seqComandos;
    }
}

class While extends Comando{
    Exp exp;
    ArrayList<Comando> seqComandos;

    While(Exp exp, ArrayList<Comando> seqComandos){
        this.exp = exp;
        this.seqComandos = seqComandos;
    }
}

class Repeat extends Comando{
    Exp exp;
    ArrayList<Comando> seqComandos;

    Repeat(Exp exp, ArrayList<Comando> seqComandos){
        this.exp = exp;
        this.seqComandos = seqComandos;
    }
}

class Return extends Comando{
    Exp exp;

    Return(Exp exp){
        this.exp = exp;
    }
}

class Sout extends Comando{
    Exp exp;

    Sout(Exp exp){
        this.exp = exp;
    }
}

class Exp{}

class Op extends Exp{}

class Soma extends Op{
    Exp a;
    Exp b;

    Soma(Exp a, Exp b){
        this.a = a;
        this.b = b;
    }
}

class Sub extends Op{
    Exp a;
    Exp b;

    Sub(Exp a, Exp b){
        this.a = a;
        this.b = b;
    }
}

class Mult extends Op{
    Exp a;
    Exp b;

    Mult(Exp a, Exp b){
        this.a = a;
        this.b = b;
    }
}

class Div extends Op{
    Exp a;
    Exp b;

    Div(Exp a, Exp b){
        this.a = a;
        this.b = b;
    }
}

class And extends Op{
    Exp a;
    Exp b;

    And(Exp a, Exp b){
        this.a = a;
        this.b = b;
    }
}

class Or extends Op{
    Exp a;
    Exp b;

    Or(Exp a, Exp b){
        this.a = a;
        this.b = b;
    }
}

class Maior extends Op{
    Exp a;
    Exp b;

    Maior(Exp a, Exp b){
        this.a = a;
        this.b = b;
    }
}

class Menor extends Op{
    Exp a;
    Exp b;

    Menor(Exp a, Exp b){
        this.a = a;
        this.b = b;
    }
}

class Igual extends Op{
    Exp a;
    Exp b;

    Igual(Exp a, Exp b){
        this.a = a;
        this.b = b;
    }
}

class Func{
    Tipo tipo;
    String var;
    ArrayList<Arg> listaArg;
    ArrayList<Decl> varDecl;
    ArrayList<Comando> seqComandos;

    Func(Tipo tipo, String var, ArrayList<Arg> listaArg, ArrayList<Decl> varDecl, ArrayList<Comando> seqComandos){
        this.tipo = tipo;
        this.var = var;
        this.listaArg = listaArg;
        this.varDecl = varDecl;
        this.seqComandos = seqComandos;
    }
}

class Arg{
    Tipo tipo;
    String var;

    Arg(Tipo tipo, String var){
        this.tipo = tipo;
        this.var = var;
    }
}

public class Karloff {

  public static void main(String args[]) throws ParseException,IOException {

    Karloff parser = new Karloff(new FileInputStream(args[0]));
    parser.Karloff();

    //ArvoreKarloff arvore = parser.Karloff();

    //pprint(arvore);
  }

  public void pprint(ArvoreKarloff arvore){

  }
}

PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <VOID: "void">
| <NVAR: "newVar">
| <PV: ";">
| <INT: "int">
| <BOOL: "bool">
| <IGUAL: "=">
| <APAR: "(">
| <FPAR: ")">
| <IF: "if">
| <THEN: "then">
| <WHILE: "while">
| <REPEAT: "repeat">
| <UNTIL: "until">
| <RETURN: "return">
| <SOUT: "System.output">
| <TRUE: "true">
| <FALSE: "false">
| <VIRGULA: ",">
| <FUNC: "func">
}

TOKEN :
{
 <OP: ("+" | "-" | "*" | "/" | "&&" | "||" | "<" | ">" | "==")>
|<ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*("_"( ["a"-"z","A"-"Z","0"-"9"])*)*>
|<NUM: (["0"-"9"])+("."(["0"-"9"])+)?("E"("+"|"-")?(["0"-"9"])+)?>
}



ArvoreKarloff Karloff ():
{Main main; ArrayList<Func> funcs;}
{
    main = Main() (Func())? <EOF>

    {return new ArvoreKarloff(main, funcs);}
}


Main Main ():
{ArrayList<Decl> varDecl; ArrayList<Comando> seqComandos;}
{
    <VOID> <MAIN> <ACHAVES> varDecl = VarDecl() seqComandos = SeqComandos() <FCHAVES>

    {return new Main(varDecl, seqComandos);}
}

ArrayList<Decl> VarDecl ():
{ArrayList<Decl> varDecl;}
{
    varDecl = VarDecl1()
}

ArrayList<Decl> VarDecl1 ():
{ArrayList<Decl> varDecl;}
{
    (<NVAR> Tipo() <ID> <PV> VarDecl1())?
}

Tipo Tipo ():
{Token t1, t2; Bool b; Int n;}
{
    t1 = <INT>
    | t2 = <BOOL>
}

void SeqComandos ():
{}
{
    SeqComandos1()
}

void SeqComandos1 ():
{}
{
    (Comando() SeqComandos1())?
}

void Comando ():
{}
{
    <ID> Comando1()
    | <IF> <APAR> Exp() <FPAR> <THEN> <ACHAVES> SeqComandos() <FCHAVES> <PV>
    | <WHILE> <APAR> Exp() <FPAR> <ACHAVES> SeqComandos() <FCHAVES> <PV>
    | <REPEAT> <ACHAVES> SeqComandos() <FCHAVES> <UNTIL> <APAR> Exp() <FPAR> <PV>
    | <RETURN> Exp() <PV>
    | <SOUT> <APAR> Exp() <FPAR> <PV>
}

void Comando1 ():
{}
{
    <IGUAL> Exp() <PV>
    | <APAR> (ListaExp())? <FPAR> <PV>
}

void Exp ():
{}
{
    <APAR> Exp() <OP> Exp() <FPAR>
    | Fator()
}

void Fator ():
{}
{
    <ID> Fator1()
    | <NUM>
    | <TRUE>
    | <FALSE>
}

void Fator1 ():
{}
{
    (<APAR> (ListaExp())? <FPAR>)?
}

void ListaExp ():
{}
{
    Exp() ListaExp1()
}

void ListaExp1 ():
{}
{
    (<VIRGULA> Exp() ListaExp1())?
}

void Func ():
{}
{
    (<FUNC> Tipo() <ID> <APAR> (ListaArg())? <FPAR> <ACHAVES> VarDecl() SeqComandos() <FCHAVES>)+
}

void ListaArg ():
{}
{
    Tipo() <ID> ListaArg1()
}

void ListaArg1 ():
{}
{
    (<VIRGULA> Tipo() <ID> ListaArg1())?
}



