PARSER_BEGIN(Karloff)
import java.io.*;

class ArvoreKarloff{}

public class Karloff {

  public static void main(String args[]) throws ParseException,IOException {
    
    Karloff parser = new Karloff(new FileInputStream(args[0]));
    parser.Karloff();

    //ArvoreKarloff arvore = parser.Karloff();

    //pprint(arvore);
  }

  public void pprint(ArvoreKarloff arvore){

  }
}

PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <VOID: "void">
| <NVAR: "newVar">
| <PV: ";">
| <INT: "int">
| <BOOL: "bool">
| <IGUAL: "=">
| <APAR: "(">
| <FPAR: ")">
| <IF: "if">
| <THEN: "then">
| <WHILE: "while">
| <REPEAT: "repeat">
| <UNTIL: "until">
| <RETURN: "return">
| <SOUT: "System.output">
| <TRUE: "true">
| <FALSE: "false">
| <VIRGULA: ",">
| <FUNC: "func">
}

TOKEN :
{
 <OP: ("+" | "-" | "*" | "/" | "&&" | "||" | "<" | ">" | "==")>
|<ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*("_"( ["a"-"z","A"-"Z","0"-"9"])*)*>
|<NUM: (["0"-"9"])+("."(["0"-"9"])+)?("E"("+"|"-")?(["0"-"9"])+)?>
}



void Karloff ():
{}
{
    Main() (Func())? <EOF>
}


void Main ():
{}
{
    <VOID> <MAIN> <ACHAVES> VarDecl() SeqComandos() <FCHAVES>
}


void VarDecl ():
{}
{
    VarDecl1()
}

void VarDecl1 ():
{}
{
    (<NVAR> Tipo() <ID> <PV> VarDecl1())?
}

void Tipo ():
{}
{
    <INT>
    | <BOOL>
}

void SeqComandos ():
{}
{
    SeqComandos1()
}

void SeqComandos1 ():
{}
{
    (Comando() SeqComandos1())?
}

void Comando ():
{}
{
    <ID> Comando1()
    | <IF> <APAR> Exp() <FPAR> <THEN> <ACHAVES> SeqComandos() <FCHAVES> <PV>
    | <WHILE> <APAR> Exp() <FPAR> <ACHAVES> SeqComandos() <FCHAVES> <PV>
    | <REPEAT> <ACHAVES> SeqComandos() <FCHAVES> <UNTIL> <APAR> Exp() <FPAR> <PV>
    | <RETURN> Exp() <PV>
    | <SOUT> <APAR> Exp() <FPAR> <PV>
}

void Comando1 ():
{}
{
    <IGUAL> Exp() <PV>
    | <APAR> (ListaExp())? <FPAR> <PV>
}

void Exp ():
{}
{
    <APAR> Exp() <OP> Exp() <FPAR>
    | Fator()
}

void Fator ():
{}
{
    <ID> Fator1()
    | <NUM>
    | <TRUE>
    | <FALSE>
}

void Fator1 ():
{}
{
    (<APAR> (ListaExp())? <FPAR>)?
}

void ListaExp ():
{}
{
    Exp() ListaExp1()
}

void ListaExp1 ():
{}
{
    (<VIRGULA> Exp() ListaExp1())?
}

void Func ():
{}
{
    (<FUNC> Tipo() <ID> <APAR> (ListaArg())? <FPAR> <ACHAVES> VarDecl() SeqComandos() <FCHAVES>)+
}

void ListaArg ():
{}
{
    Tipo() <ID> ListaArg1()
}

void ListaArg1 ():
{}
{
    (<VIRGULA> Tipo() <ID> ListaArg1())?
}



