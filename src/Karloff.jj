PARSER_BEGIN(Karloff)
import java.io.*;
import java.util.ArrayList;

class ArvoreKarloff{
    Main main;
    ArrayList<Func> funcs;

    ArvoreKarloff(Main main, ArrayList<Func> funcs){
        this.main = main;
        this.funcs = funcs;
    }
}

class Main{
    ArrayList<Decl> varDecl;
    ArrayList<Comando> seqComandos;

    Main(ArrayList<Decl> varDecl, ArrayList<Comando> seqComandos){
        this.varDecl = varDecl;
        this.seqComandos = seqComandos;
    }
}

class Decl{
    Tipo tipo;
    String var;

    Decl(Tipo tipo, String var){
        this.tipo = tipo;
        this.var = var;
    }
}

class Tipo{}

class Int extends Tipo{
    String n;

    Int(String n){
        this.n = n;
    }
}

class Bool extends Tipo{
    String bool;

    Bool(String bool){
        this.bool = bool;
    }
}

class Comando{}

class Atrib extends Comando{
    String var;
    ArrayList<Exp> exp;

    Atrib(String var, ArrayList<Exp> exp){
        this.var = var;
        this.exp = exp;
    }
}

class ChamadaDeFuncao extends Comando{
    String var;
    ArrayList<Exp> listaExp;

    ChamadaDeFuncao(String var, ArrayList<Exp> listaExp){
        this.var = var;
        this.listaExp = listaExp;
    }
}

class If extends Comando{
    Exp exp;
    ArrayList<Comando> seqComandos;

    If(Exp exp, ArrayList<Comando> seqComandos){
        this.exp = exp;
        this.seqComandos = seqComandos;
    }
}

class While extends Comando{
    Exp exp;
    ArrayList<Comando> seqComandos;

    While(Exp exp, ArrayList<Comando> seqComandos){
        this.exp = exp;
        this.seqComandos = seqComandos;
    }
}

class Repeat extends Comando{
    Exp exp;
    ArrayList<Comando> seqComandos;

    Repeat(Exp exp, ArrayList<Comando> seqComandos){
        this.exp = exp;
        this.seqComandos = seqComandos;
    }
}

class Return extends Comando{
    Exp exp;

    Return(Exp exp){
        this.exp = exp;
    }
}

class Sout extends Comando{
    Exp exp;

    Sout(Exp exp){
        this.exp = exp;
    }
}

class Exp{}

class Op extends Exp{
    Exp a;
    String op;
    Exp b;

    Op(Exp a, String op, Exp b){
        this.a = a;
        this.op = op;
        this.b = b;
    }
}

class Fator extends Exp{}

class Id extends Fator{
    String var;

    Id(String var){
        this.var = var;
    }
}

class FuncFator extends Fator{
    String var;
    ArrayList<Exp> exps;

    FuncFator(String var, ArrayList<Exp> exps){
        this.var = var;
        this.exps = exps;
    }
}

class Num extends Fator{
    String num;

    Num(String num){
        this.num = num;
    }
}

class True extends Fator{
    String t;

    True(String t){
        this.t = t;
    }
}

class False extends Fator{
    String f;

    False(String f){
        this.f = f;
    }
}

class Func{
    Tipo tipo;
    String var;
    ArrayList<Arg> listaArg;
    ArrayList<Decl> varDecl;
    ArrayList<Comando> seqComandos;

    Func(Tipo tipo, String var, ArrayList<Arg> listaArg, ArrayList<Decl> varDecl, ArrayList<Comando> seqComandos){
        this.tipo = tipo;
        this.var = var;
        this.listaArg = listaArg;
        this.varDecl = varDecl;
        this.seqComandos = seqComandos;
    }
}

class Arg{
    Tipo tipo;
    String var;

    Arg(Tipo tipo, String var){
        this.tipo = tipo;
        this.var = var;
    }
}

public class Karloff {

  public static void main(String args[]) throws ParseException,IOException {

    Karloff parser = new Karloff(new FileInputStream(args[0]));
    //parser.Karloff();

    ArvoreKarloff arvore = parser.Karloff();
    pprint(arvore);
  }

  static void pprint(ArvoreKarloff arvore){
    pprintMain(arvore.main);
    pprintFunc(arvore.funcs);
  }

  static void pprintMain(Main main){
    System.out.print("void main {\n");
    pprintVarDecl(main.varDecl);
    pprintSeqComandos(main.seqComandos);
    System.out.print("}\n");
  }

  static void pprintVarDecl(ArrayList<Decl> varDecl){
    for(Decl decl : varDecl){
        System.out.print("newVar ");
        pprintTipo(decl.tipo);
        System.out.print(" ");
        System.out.print(decl.var);
        System.out.print(";\n");
    }
  }

  static void pprintTipo(Tipo tipo){
    if(tipo instanceof Int)
        System.out.print( ((Int) tipo).n);
    else
        System.out.print( ((Bool) tipo).bool);
  }

  static void pprintSeqComandos(ArrayList<Comando> comandos){
    for(Comando comando : comandos){
        pprintComando(comando);
    }
  }

  static void pprintComando(Comando comando){
    if(comando instanceof Atrib){
        System.out.print( ((Atrib) comando).var + " = ");
        pprintListaExp( ((Atrib) comando).exp);
        System.out.print(";\n");
    }else if(comando instanceof ChamadaDeFuncao){
        System.out.print( ((ChamadaDeFuncao) comando).var + " ( ");
        pprintListaExp( ((ChamadaDeFuncao) comando).listaExp);
        System.out.print(" );\n");
    }else if(comando instanceof If){
        System.out.print("if ( ");
        pprintExp( ((If) comando).exp);
        System.out.print(" ) then {\n");
        pprintSeqComandos( ((If) comando).seqComandos);
        System.out.print("};\n");
    }else if(comando instanceof While){
        System.out.print("while ( ");
        pprintExp( ((While) comando).exp);
        System.out.print(" ) {\n");
        pprintSeqComandos( ((While) comando).seqComandos);
        System.out.print("};\n");
    }else if(comando instanceof Repeat){
        System.out.print("repeat {\n");
        pprintSeqComandos( ((Repeat) comando).seqComandos);
        System.out.print("} until ( ");
        pprintExp( ((Repeat) comando).exp);
        System.out.print(" );\n");
    }else if(comando instanceof Return){
        System.out.print("return ");
        pprintExp( ((Return) comando).exp);
        System.out.print(";\n");
    }else if(comando instanceof Sout){
        System.out.print("System.output(");
        pprintExp( ((Sout) comando).exp);
        System.out.print(");\n");
    }
  }

  static void pprintExp(Exp exp){
    if(exp instanceof Op){
        pprintOp((Op) exp);
    }
    else
        pprintFator((Fator) exp);
  }

  static void pprintOp(Op op){
    System.out.print("( ");
    pprintExp(op.a);
    System.out.print(" " + op.op + " ");
    pprintExp(op.b);
    System.out.print(" )");
  }

  static void pprintFator(Fator fator){
    if(fator instanceof Id){
        System.out.print( ((Id) fator).var);
    }else if(fator instanceof FuncFator){
        System.out.print( ((FuncFator) fator).var + "( ");
        pprintListaExp( ((FuncFator) fator).exps);
        System.out.print(" )");
    }else if(fator instanceof Num){
        System.out.print( ((Num) fator).num);
    }else if(fator instanceof True){
        System.out.print( ((True) fator).t);
    }else if(fator instanceof False){
        System.out.print( ((False) fator).f);
    }
  }

  static void pprintListaExp(ArrayList<Exp> exps){
    int i;
    for(i = 0; i < exps.size(); i++){
        if(i > 0)
            System.out.print(", ");
        pprintExp(exps.get(i));
    }
  }

  static void pprintFunc(ArrayList<Func> funcs){
    for(Func func : funcs){
        System.out.print("func ");
        pprintTipo(func.tipo);
        System.out.print(" " + func.var + " (");
        pprintListaArg(func.listaArg);
        System.out.print(" ) {\n");
        pprintVarDecl(func.varDecl);
        pprintSeqComandos(func.seqComandos);
        System.out.print("}\n");
    }
  }

  static void pprintListaArg(ArrayList<Arg> args){
    int i;
    for(i = 0; i < args.size(); i++){
        if(i > 0)
            System.out.print(", ");
        pprintTipo(args.get(i).tipo);
        System.out.print(" " + (args.get(i)).var);
    }
  }
}

PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <VOID: "void">
| <NVAR: "newVar">
| <PV: ";">
| <INT: "int">
| <BOOL: "bool">
| <IGUAL: "=">
| <APAR: "(">
| <FPAR: ")">
| <IF: "if">
| <THEN: "then">
| <WHILE: "while">
| <REPEAT: "repeat">
| <UNTIL: "until">
| <RETURN: "return">
| <SOUT: "System.output">
| <TRUE: "true">
| <FALSE: "false">
| <VIRGULA: ",">
| <FUNC: "func">
}

TOKEN :
{
 <OP: ("+" | "-" | "*" | "/" | "&&" | "||" | "<" | ">" | "==")>
|<ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*("_"( ["a"-"z","A"-"Z","0"-"9"])*)*>
|<NUM: (["0"-"9"])+("."(["0"-"9"])+)?("E"("+"|"-")?(["0"-"9"])+)?>
}



ArvoreKarloff Karloff ():
{Main main = null; ArrayList<Func> funcs = null;}
{
    main = Main() (funcs = Func())? <EOF>

    {return new ArvoreKarloff(main, funcs);}
}


Main Main ():
{ArrayList<Decl> varDecl; ArrayList<Comando> seqComandos;}
{
    <VOID> <MAIN> <ACHAVES> varDecl = VarDecl() seqComandos = SeqComandos() <FCHAVES>

    {return new Main(varDecl, seqComandos);}
}

ArrayList<Decl> VarDecl ():
{ArrayList<Decl> varDecl = new ArrayList<Decl>(); Token id = null; Tipo tipo = null;}
{
    (<NVAR> tipo = Tipo() id = <ID> <PV> {varDecl.add(new Decl(tipo, id.image));})*

    {return varDecl;}
}

Tipo Tipo ():
{Token t1 = null; Token t2 = null; Tipo t;}
{
    (t1 = <INT> {t = new Int(t1.image);}
    | t2 = <BOOL> {t = new Bool(t2.image);})

    {return t;}
}

ArrayList<Comando> SeqComandos ():
{ArrayList<Comando> comandos = new ArrayList<Comando>(); Comando c = null;}
{
    (c = Comando() {comandos.add(c);})*

    {return comandos;}
}

Comando Comando ():
{Comando comando; Token id = null; Exp exp = null; ArrayList<Comando> comandos = null; ArrayList<Exp> listaExp = new ArrayList<Exp>();}
{
    (id = <ID> (<IGUAL> exp = Exp() <PV> {listaExp.add(exp);} | <APAR> (listaExp = ListaExp())? <FPAR> <PV>) {comando = new Atrib(id.image, listaExp);}
    | <IF> <APAR> exp = Exp() <FPAR> <THEN> <ACHAVES> comandos = SeqComandos() <FCHAVES> <PV> {comando = new If(exp, comandos);}
    | <WHILE> <APAR> exp = Exp() <FPAR> <ACHAVES> comandos = SeqComandos() <FCHAVES> <PV> {comando = new While(exp, comandos);}
    | <REPEAT> <ACHAVES> comandos = SeqComandos() <FCHAVES> <UNTIL> <APAR> exp = Exp() <FPAR> <PV> {comando = new Repeat(exp, comandos);}
    | <RETURN> exp = Exp() <PV> {comando = new Return(exp);}
    | <SOUT> <APAR> exp = Exp() <FPAR> <PV> {comando = new Sout(exp);})

    {return comando;}
}

Exp Exp ():
{Exp a = null, b = null, exp; Fator f = null; Token op = null; Op o;}
{

    (<APAR> a = Exp() op = <OP> b = Exp() <FPAR> {o = new Op(a, op.image, b); exp = o;}
    | f = Fator() {exp = f;})

    {return exp;}
}

Fator Fator ():
{Token t = null; ArrayList<Exp> exps = new ArrayList<Exp>(); Fator f = null;}
{

    (t = <ID> (<APAR> (exps = ListaExp())? <FPAR>)?
    {
        if(exps.isEmpty())
            f = new Id(t.image);
        else
            f = new FuncFator(t.image, exps);
    }
    | t = <NUM> {f = new Num(t.image);}
    | t = <TRUE> {f = new True(t.image);}
    | t = <FALSE> {f = new False(t.image);})

    {return f;}
}

ArrayList<Exp> ListaExp ():
{ArrayList<Exp> exps = new ArrayList<Exp>(); Exp exp1 = null, exp2 = null;}
{
    exp1 = Exp() (<VIRGULA> exp2 = Exp())*
    {
        exps.add(exp1);

        if(exp2 != null)
            exps.add(exp2);
    }

    {return exps;}
}

ArrayList<Func> Func ():
{ArrayList<Func> funcs = new ArrayList<Func>(); Tipo t = null; Token id = null; ArrayList<Arg> args = null; ArrayList<Decl> decls = null; ArrayList<Comando> comandos = null;}
{
    (<FUNC> t = Tipo() id = <ID> <APAR> (args = ListaArg())* <FPAR> <ACHAVES> decls = VarDecl() comandos = SeqComandos() <FCHAVES>
    {funcs.add(new Func(t, id.image, args, decls, comandos));})+

    {return funcs;}
}

ArrayList<Arg> ListaArg ():
{ArrayList<Arg> args = new ArrayList<Arg>(); Tipo tipo1 = null; Tipo tipo2 = null; Token id1 = null; Token id2 = null;}
{
    tipo1 = Tipo() id1 = <ID> {args.add(new Arg(tipo1, id1.image));} (<VIRGULA> tipo2 = Tipo() id2 = <ID>
    {
        if(tipo2 != null && id2 != null)
            args.add(new Arg(tipo2, id2.image));
    })*

    {return args;}
}
